# üß† Desafio: N√∫meros M√°gicos
# Crie um programa que:

# Pe√ßa ao usu√°rio para digitar um n√∫mero inteiro positivo.
# Verifique se o n√∫mero √© par ou √≠mpar.
# Verifique se o n√∫mero √© m√∫ltiplo de 3.
# Exiba uma mensagem personalizada com base nas verifica√ß√µes.

# üí° Exemplo de sa√≠da:
# Se o usu√°rio digitar 9, o programa deve imprimir:
# O n√∫mero 9 √© √≠mpar e m√∫ltiplo de 3. Isso √© m√°gico!

# Se digitar 8, o programa deve imprimir:
# O n√∫mero 8 √© par e n√£o √© m√∫ltiplo de 3.


def colect_number():
    try:
        number = int(input('Digite um n√∫mero: '))
        if number <0:
            print('Erro: Digite um n√∫mero positivo.')
            return
    except ValueError:
        print('Erro: d√≠gite apenas n√∫meros')
        return
    
    verify_number(number)


def verify_number(number):
    par_or_impar = "par" if number % 2 == 0 else "√≠mpar"
    multiple_3 = number % 3 == 0

    if multiple_3:
        print(f'O n√∫mero {number} √© {par_or_impar} e m√∫ltiplo de 3. Isso √© m√°gico!\n')
    else:
        print(f'O n√∫mero {number} √© {par_or_impar} e n√£o √© m√∫ltiplo de 3.\n')

while True:
    colect_number()